<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Test\Schema\Mapper;

use DoclerLabs\ApiClientException\UnexpectedResponseBodyException;
use Test\Schema\IntParamEnum;
use Test\Schema\ItemWithArraysOfEnumProperties;
use Test\Schema\StringParamOneEnum;
use Test\Schema\StringParamTwoEnum;

class ItemWithArraysOfEnumPropertiesMapper implements SchemaMapperInterface
{
    /**
     * @throws UnexpectedResponseBodyException
     */
    public function toSchema(array $payload): ItemWithArraysOfEnumProperties
    {
        $missingFields = implode(', ', array_diff(['mandatoryStringEnumArray', 'mandatoryNullableStringEnumArray', 'mandatoryIntegerEnumArray'], array_keys($payload)));
        if (!empty($missingFields)) {
            throw new UnexpectedResponseBodyException('Required attributes for `ItemWithArraysOfEnumProperties` missing in the response body: ' . $missingFields);
        }
        $schema = new ItemWithArraysOfEnumProperties(array_map(static fn (string $item): StringParamOneEnum => StringParamOneEnum::from($item), $payload['mandatoryStringEnumArray']), $payload['mandatoryNullableStringEnumArray'] !== null ? array_map(static fn (string $item): StringParamOneEnum => StringParamOneEnum::from($item), $payload['mandatoryNullableStringEnumArray']) : null, array_map(static fn (int $item): IntParamEnum => IntParamEnum::from($item), $payload['mandatoryIntegerEnumArray']));
        if (isset($payload['optionalStringEnumArray'])) {
            $schema->setOptionalStringEnumArray(array_map(static fn (string $item): StringParamTwoEnum => StringParamTwoEnum::from($item), $payload['optionalStringEnumArray']));
        }
        if (array_key_exists('nullableStringEnumArray', $payload)) {
            $schema->setNullableStringEnumArray($payload['nullableStringEnumArray'] !== null ? array_map(static fn (string $item): StringParamTwoEnum => StringParamTwoEnum::from($item), $payload['nullableStringEnumArray']) : null);
        }
        if (empty($schema->toArray())) {
            throw new UnexpectedResponseBodyException();
        }

        return $schema;
    }
}
