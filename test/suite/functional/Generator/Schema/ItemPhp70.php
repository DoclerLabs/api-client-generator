<?php declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Test\Schema;

use DateTimeInterface;
use DoclerLabs\ApiClientException\RequestValidationException;
use JsonSerializable;

class Item implements SerializableInterface, JsonSerializable
{
    const MANDATORY_ENUM_ONE_OPTION = 'one option';

    const MANDATORY_ENUM_ANOTHER_OPTION = 'another option';

    const OPTIONAL_ENUM_ONE_OPTION = 'one option';

    const OPTIONAL_ENUM_ANOTHER_OPTION = 'another option';

    /** @var int */
    private $mandatoryInteger;

    /** @var string */
    private $mandatoryString;

    /** @var string */
    private $mandatoryEnum;

    /** @var DateTimeInterface */
    private $mandatoryDate;

    /** @var DateTimeInterface|null */
    private $mandatoryNullableDate;

    /** @var float */
    private $mandatoryFloat;

    /** @var bool */
    private $mandatoryBoolean;

    /** @var string[] */
    private $mandatoryArray;

    /** @var string[] */
    private $mandatoryArrayWithMinItems;

    /** @var ItemMandatoryObject */
    private $mandatoryObject;

    private $mandatoryMixed;

    private $mandatoryAnyOf;

    /** @var ItemNullableObject|null */
    private $nullableObject;

    /** @var DateTimeInterface|null */
    private $nullableDate;

    /** @var int|null */
    private $optionalInteger;

    /** @var string|null */
    private $optionalString;

    /** @var string|null */
    private $optionalEnum;

    /** @var DateTimeInterface|null */
    private $optionalDate;

    /** @var float|null */
    private $optionalFloat;

    /** @var bool|null */
    private $optionalBoolean;

    /** @var string[]|null */
    private $optionalArray;

    /** @var mixed[]|null */
    private $optionalMixedArray;

    /** @var string[]|null */
    private $optionalArrayWithMinMaxItems;

    /** @var string|null */
    private $optionalStringWithMinMaxLength;

    /** @var string|null */
    private $optionalStringWithPattern;

    /** @var int|null */
    private $optionalIntegerBetweenIncluded;

    /** @var int|null */
    private $optionalIntegerBetweenExcluded;

    /** @var float|null */
    private $optionalNumberBetweenIncluded;

    /** @var float|null */
    private $optionalNumberBetweenExcluded;

    /** @var EmbeddedObject|null */
    private $optionalObject;

    /**
     * @param DateTimeInterface|null $mandatoryNullableDate
     * @param string[]               $mandatoryArray
     * @param string[]               $mandatoryArrayWithMinItems
     *
     * @throws RequestValidationException
     */
    public function __construct(int $mandatoryInteger, string $mandatoryString, string $mandatoryEnum, DateTimeInterface $mandatoryDate, $mandatoryNullableDate, float $mandatoryFloat, bool $mandatoryBoolean, array $mandatoryArray, array $mandatoryArrayWithMinItems, ItemMandatoryObject $mandatoryObject, $mandatoryMixed, $mandatoryAnyOf)
    {
        $this->mandatoryInteger      = $mandatoryInteger;
        $this->mandatoryString       = $mandatoryString;
        $this->mandatoryEnum         = $mandatoryEnum;
        $this->mandatoryDate         = $mandatoryDate;
        $this->mandatoryNullableDate = $mandatoryNullableDate;
        $this->mandatoryFloat        = $mandatoryFloat;
        $this->mandatoryBoolean      = $mandatoryBoolean;
        $this->mandatoryArray        = $mandatoryArray;
        if (\count($mandatoryArrayWithMinItems) < 1) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Expected min items: `1`.', 'mandatoryArrayWithMinItems', $mandatoryArrayWithMinItems));
        }
        $this->mandatoryArrayWithMinItems = $mandatoryArrayWithMinItems;
        $this->mandatoryObject            = $mandatoryObject;
        $this->mandatoryMixed             = $mandatoryMixed;
        $this->mandatoryAnyOf             = $mandatoryAnyOf;
    }

    /**
     * @param ItemNullableObject|null $nullableObject
     */
    public function setNullableObject($nullableObject): self
    {
        $this->nullableObject = $nullableObject;

        return $this;
    }

    /**
     * @param DateTimeInterface|null $nullableDate
     */
    public function setNullableDate($nullableDate): self
    {
        $this->nullableDate = $nullableDate;

        return $this;
    }

    public function setOptionalInteger(int $optionalInteger): self
    {
        $this->optionalInteger = $optionalInteger;

        return $this;
    }

    public function setOptionalString(string $optionalString): self
    {
        $this->optionalString = $optionalString;

        return $this;
    }

    public function setOptionalEnum(string $optionalEnum): self
    {
        $this->optionalEnum = $optionalEnum;

        return $this;
    }

    public function setOptionalDate(DateTimeInterface $optionalDate): self
    {
        $this->optionalDate = $optionalDate;

        return $this;
    }

    public function setOptionalFloat(float $optionalFloat): self
    {
        $this->optionalFloat = $optionalFloat;

        return $this;
    }

    public function setOptionalBoolean(bool $optionalBoolean): self
    {
        $this->optionalBoolean = $optionalBoolean;

        return $this;
    }

    /**
     * @param string[] $optionalArray
     */
    public function setOptionalArray(array $optionalArray): self
    {
        $this->optionalArray = $optionalArray;

        return $this;
    }

    /**
     * @param mixed[] $optionalMixedArray
     */
    public function setOptionalMixedArray(array $optionalMixedArray): self
    {
        $this->optionalMixedArray = $optionalMixedArray;

        return $this;
    }

    /**
     * @param string[] $optionalArrayWithMinMaxItems
     *
     * @throws RequestValidationException
     */
    public function setOptionalArrayWithMinMaxItems(array $optionalArrayWithMinMaxItems): self
    {
        if (\count($optionalArrayWithMinMaxItems) < 1) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Expected min items: `1`.', 'optionalArrayWithMinMaxItems', $optionalArrayWithMinMaxItems));
        }
        if (\count($optionalArrayWithMinMaxItems) > 5) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Expected max items: `5`.', 'optionalArrayWithMinMaxItems', $optionalArrayWithMinMaxItems));
        }
        $this->optionalArrayWithMinMaxItems = $optionalArrayWithMinMaxItems;

        return $this;
    }

    /**
     * @throws RequestValidationException
     */
    public function setOptionalStringWithMinMaxLength(string $optionalStringWithMinMaxLength): self
    {
        if (\strlen($optionalStringWithMinMaxLength) < 1) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Length should be greater than 1.', 'optionalStringWithMinMaxLength', $optionalStringWithMinMaxLength));
        }
        if (\strlen($optionalStringWithMinMaxLength) > 5) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Length should be less than 5.', 'optionalStringWithMinMaxLength', $optionalStringWithMinMaxLength));
        }
        $this->optionalStringWithMinMaxLength = $optionalStringWithMinMaxLength;

        return $this;
    }

    /**
     * @throws RequestValidationException
     */
    public function setOptionalStringWithPattern(string $optionalStringWithPattern): self
    {
        if (\preg_match('/^\\d{3}-\\d{2}-\\d{4}$/', $optionalStringWithPattern) !== 1) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Pattern is ^\\d{3}-\\d{2}-\\d{4}$.', 'optionalStringWithPattern', $optionalStringWithPattern));
        }
        $this->optionalStringWithPattern = $optionalStringWithPattern;

        return $this;
    }

    /**
     * @throws RequestValidationException
     */
    public function setOptionalIntegerBetweenIncluded(int $optionalIntegerBetweenIncluded): self
    {
        if ($optionalIntegerBetweenIncluded < 0) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be less than 0.', 'optionalIntegerBetweenIncluded', $optionalIntegerBetweenIncluded));
        }
        if ($optionalIntegerBetweenIncluded > 5) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be greater than 5.', 'optionalIntegerBetweenIncluded', $optionalIntegerBetweenIncluded));
        }
        $this->optionalIntegerBetweenIncluded = $optionalIntegerBetweenIncluded;

        return $this;
    }

    /**
     * @throws RequestValidationException
     */
    public function setOptionalIntegerBetweenExcluded(int $optionalIntegerBetweenExcluded): self
    {
        if ($optionalIntegerBetweenExcluded <= 0) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be less than or equal to 0.', 'optionalIntegerBetweenExcluded', $optionalIntegerBetweenExcluded));
        }
        if ($optionalIntegerBetweenExcluded >= 5) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be greater than or equal to 5.', 'optionalIntegerBetweenExcluded', $optionalIntegerBetweenExcluded));
        }
        $this->optionalIntegerBetweenExcluded = $optionalIntegerBetweenExcluded;

        return $this;
    }

    /**
     * @throws RequestValidationException
     */
    public function setOptionalNumberBetweenIncluded(float $optionalNumberBetweenIncluded): self
    {
        if ($optionalNumberBetweenIncluded < 0.0) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be less than 0.', 'optionalNumberBetweenIncluded', $optionalNumberBetweenIncluded));
        }
        if ($optionalNumberBetweenIncluded > 5.0) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be greater than 5.', 'optionalNumberBetweenIncluded', $optionalNumberBetweenIncluded));
        }
        $this->optionalNumberBetweenIncluded = $optionalNumberBetweenIncluded;

        return $this;
    }

    /**
     * @throws RequestValidationException
     */
    public function setOptionalNumberBetweenExcluded(float $optionalNumberBetweenExcluded): self
    {
        if ($optionalNumberBetweenExcluded <= 0.0) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be less than or equal to 0.', 'optionalNumberBetweenExcluded', $optionalNumberBetweenExcluded));
        }
        if ($optionalNumberBetweenExcluded >= 5.0) {
            throw new RequestValidationException(\sprintf('Invalid %s value. Given: `%s`. Cannot be greater than or equal to 5.', 'optionalNumberBetweenExcluded', $optionalNumberBetweenExcluded));
        }
        $this->optionalNumberBetweenExcluded = $optionalNumberBetweenExcluded;

        return $this;
    }

    public function setOptionalObject(EmbeddedObject $optionalObject): self
    {
        $this->optionalObject = $optionalObject;

        return $this;
    }

    public function getMandatoryInteger(): int
    {
        return $this->mandatoryInteger;
    }

    public function getMandatoryString(): string
    {
        return $this->mandatoryString;
    }

    public function getMandatoryEnum(): string
    {
        return $this->mandatoryEnum;
    }

    public function getMandatoryDate(): DateTimeInterface
    {
        return $this->mandatoryDate;
    }

    /**
     * @return DateTimeInterface|null
     */
    public function getMandatoryNullableDate()
    {
        return $this->mandatoryNullableDate;
    }

    public function getMandatoryFloat(): float
    {
        return $this->mandatoryFloat;
    }

    public function getMandatoryBoolean(): bool
    {
        return $this->mandatoryBoolean;
    }

    /**
     * @return string[]
     */
    public function getMandatoryArray(): array
    {
        return $this->mandatoryArray;
    }

    /**
     * @return string[]
     */
    public function getMandatoryArrayWithMinItems(): array
    {
        return $this->mandatoryArrayWithMinItems;
    }

    public function getMandatoryObject(): ItemMandatoryObject
    {
        return $this->mandatoryObject;
    }

    public function getMandatoryMixed()
    {
        return $this->mandatoryMixed;
    }

    public function getMandatoryAnyOf()
    {
        return $this->mandatoryAnyOf;
    }

    /**
     * @return ItemNullableObject|null
     */
    public function getNullableObject()
    {
        return $this->nullableObject;
    }

    /**
     * @return DateTimeInterface|null
     */
    public function getNullableDate()
    {
        return $this->nullableDate;
    }

    /**
     * @return int|null
     */
    public function getOptionalInteger()
    {
        return $this->optionalInteger;
    }

    /**
     * @return string|null
     */
    public function getOptionalString()
    {
        return $this->optionalString;
    }

    /**
     * @return string|null
     */
    public function getOptionalEnum()
    {
        return $this->optionalEnum;
    }

    /**
     * @return DateTimeInterface|null
     */
    public function getOptionalDate()
    {
        return $this->optionalDate;
    }

    /**
     * @return float|null
     */
    public function getOptionalFloat()
    {
        return $this->optionalFloat;
    }

    /**
     * @return bool|null
     */
    public function getOptionalBoolean()
    {
        return $this->optionalBoolean;
    }

    /**
     * @return string[]|null
     */
    public function getOptionalArray()
    {
        return $this->optionalArray;
    }

    /**
     * @return mixed[]|null
     */
    public function getOptionalMixedArray()
    {
        return $this->optionalMixedArray;
    }

    /**
     * @return string[]|null
     */
    public function getOptionalArrayWithMinMaxItems()
    {
        return $this->optionalArrayWithMinMaxItems;
    }

    /**
     * @return string|null
     */
    public function getOptionalStringWithMinMaxLength()
    {
        return $this->optionalStringWithMinMaxLength;
    }

    /**
     * @return string|null
     */
    public function getOptionalStringWithPattern()
    {
        return $this->optionalStringWithPattern;
    }

    /**
     * @return int|null
     */
    public function getOptionalIntegerBetweenIncluded()
    {
        return $this->optionalIntegerBetweenIncluded;
    }

    /**
     * @return int|null
     */
    public function getOptionalIntegerBetweenExcluded()
    {
        return $this->optionalIntegerBetweenExcluded;
    }

    /**
     * @return float|null
     */
    public function getOptionalNumberBetweenIncluded()
    {
        return $this->optionalNumberBetweenIncluded;
    }

    /**
     * @return float|null
     */
    public function getOptionalNumberBetweenExcluded()
    {
        return $this->optionalNumberBetweenExcluded;
    }

    /**
     * @return EmbeddedObject|null
     */
    public function getOptionalObject()
    {
        return $this->optionalObject;
    }

    public function toArray(): array
    {
        $fields                               = [];
        $fields['mandatoryInteger']           = $this->mandatoryInteger;
        $fields['mandatoryString']            = $this->mandatoryString;
        $fields['mandatoryEnum']              = $this->mandatoryEnum;
        $fields['mandatoryDate']              = $this->mandatoryDate->format(DATE_RFC3339);
        $fields['mandatoryNullableDate']      = $this->mandatoryNullableDate !== null ? $this->mandatoryNullableDate->format(DATE_RFC3339) : null;
        $fields['mandatoryFloat']             = $this->mandatoryFloat;
        $fields['mandatoryBoolean']           = $this->mandatoryBoolean;
        $fields['mandatoryArray']             = $this->mandatoryArray;
        $fields['mandatoryArrayWithMinItems'] = $this->mandatoryArrayWithMinItems;
        $fields['mandatoryObject']            = $this->mandatoryObject->toArray();
        $fields['mandatoryMixed']             = $this->mandatoryMixed;
        $fields['mandatoryAnyOf']             = $this->mandatoryAnyOf;
        $fields['nullableObject']             = $this->nullableObject !== null ? $this->nullableObject->toArray() : null;
        $fields['nullableDate']               = $this->nullableDate   !== null ? $this->nullableDate->format(DATE_RFC3339) : null;
        if ($this->optionalInteger !== null) {
            $fields['optionalInteger'] = $this->optionalInteger;
        }
        if ($this->optionalString !== null) {
            $fields['optionalString'] = $this->optionalString;
        }
        if ($this->optionalEnum !== null) {
            $fields['optionalEnum'] = $this->optionalEnum;
        }
        if ($this->optionalDate !== null) {
            $fields['optionalDate'] = $this->optionalDate->format(DATE_RFC3339);
        }
        if ($this->optionalFloat !== null) {
            $fields['optionalFloat'] = $this->optionalFloat;
        }
        if ($this->optionalBoolean !== null) {
            $fields['optionalBoolean'] = $this->optionalBoolean;
        }
        if ($this->optionalArray !== null) {
            $fields['optionalArray'] = $this->optionalArray;
        }
        if ($this->optionalMixedArray !== null) {
            $fields['optionalMixedArray'] = $this->optionalMixedArray;
        }
        if ($this->optionalArrayWithMinMaxItems !== null) {
            $fields['optionalArrayWithMinMaxItems'] = $this->optionalArrayWithMinMaxItems;
        }
        if ($this->optionalStringWithMinMaxLength !== null) {
            $fields['optionalStringWithMinMaxLength'] = $this->optionalStringWithMinMaxLength;
        }
        if ($this->optionalStringWithPattern !== null) {
            $fields['optionalStringWithPattern'] = $this->optionalStringWithPattern;
        }
        if ($this->optionalIntegerBetweenIncluded !== null) {
            $fields['optionalIntegerBetweenIncluded'] = $this->optionalIntegerBetweenIncluded;
        }
        if ($this->optionalIntegerBetweenExcluded !== null) {
            $fields['optionalIntegerBetweenExcluded'] = $this->optionalIntegerBetweenExcluded;
        }
        if ($this->optionalNumberBetweenIncluded !== null) {
            $fields['optionalNumberBetweenIncluded'] = $this->optionalNumberBetweenIncluded;
        }
        if ($this->optionalNumberBetweenExcluded !== null) {
            $fields['optionalNumberBetweenExcluded'] = $this->optionalNumberBetweenExcluded;
        }
        if ($this->optionalObject !== null) {
            $fields['optionalObject'] = $this->optionalObject->toArray();
        }

        return $fields;
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }
}
