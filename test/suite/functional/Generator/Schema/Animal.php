<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Test\Schema;

use JsonSerializable;

class Animal implements SerializableInterface, JsonSerializable
{
    public const OBJECT_TYPE_ANIMAL = 'animal';

    private string $objectType;

    private string $name;

    private ?Characteristics $characteristics = null;

    private array $optionalPropertyChanged = ['characteristics' => false];

    public function __construct(string $objectType, string $name)
    {
        $this->objectType = $objectType;
        $this->name       = $name;
    }

    public function setCharacteristics(Characteristics $characteristics): self
    {
        $this->characteristics                            = $characteristics;
        $this->optionalPropertyChanged['characteristics'] = true;

        return $this;
    }

    public function hasCharacteristics(): bool
    {
        return $this->optionalPropertyChanged['characteristics'];
    }

    public function getObjectType(): string
    {
        return $this->objectType;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getCharacteristics(): ?Characteristics
    {
        return $this->characteristics;
    }

    public function toArray(): array
    {
        $fields               = [];
        $fields['objectType'] = $this->objectType;
        $fields['name']       = $this->name;
        if ($this->hasCharacteristics()) {
            $fields['characteristics'] = $this->characteristics->toArray();
        }

        return $fields;
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }
}
