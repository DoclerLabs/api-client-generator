<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Test\Schema;

use JsonSerializable;

class ItemWithArraysOfEnumProperties implements SerializableInterface, JsonSerializable
{
    private ?array $optionalStringEnumArray = null;

    private ?array $nullableStringEnumArray = null;

    private array $optionalPropertyChanged = ['optionalStringEnumArray' => false, 'nullableStringEnumArray' => false];

    /**
     * @param StringParamOneEnum[]      $mandatoryStringEnumArray
     * @param StringParamOneEnum[]|null $mandatoryNullableStringEnumArray
     * @param IntParamEnum[]            $mandatoryIntegerEnumArray
     */
    public function __construct(private readonly array $mandatoryStringEnumArray, private readonly ?array $mandatoryNullableStringEnumArray, private readonly array $mandatoryIntegerEnumArray)
    {
    }

    /**
     * @param StringParamTwoEnum[] $optionalStringEnumArray
     */
    public function setOptionalStringEnumArray(array $optionalStringEnumArray): self
    {
        $this->optionalStringEnumArray                            = $optionalStringEnumArray;
        $this->optionalPropertyChanged['optionalStringEnumArray'] = true;

        return $this;
    }

    /**
     * @param StringParamTwoEnum[]|null $nullableStringEnumArray
     */
    public function setNullableStringEnumArray(?array $nullableStringEnumArray): self
    {
        $this->nullableStringEnumArray                            = $nullableStringEnumArray;
        $this->optionalPropertyChanged['nullableStringEnumArray'] = true;

        return $this;
    }

    public function hasOptionalStringEnumArray(): bool
    {
        return $this->optionalPropertyChanged['optionalStringEnumArray'];
    }

    public function hasNullableStringEnumArray(): bool
    {
        return $this->optionalPropertyChanged['nullableStringEnumArray'];
    }

    /**
     * @return StringParamOneEnum[]
     */
    public function getMandatoryStringEnumArray(): array
    {
        return $this->mandatoryStringEnumArray;
    }

    /**
     * @return StringParamOneEnum[]|null
     */
    public function getMandatoryNullableStringEnumArray(): ?array
    {
        return $this->mandatoryNullableStringEnumArray;
    }

    /**
     * @return StringParamTwoEnum[]|null
     */
    public function getOptionalStringEnumArray(): ?array
    {
        return $this->optionalStringEnumArray;
    }

    /**
     * @return IntParamEnum[]
     */
    public function getMandatoryIntegerEnumArray(): array
    {
        return $this->mandatoryIntegerEnumArray;
    }

    /**
     * @return StringParamTwoEnum[]|null
     */
    public function getNullableStringEnumArray(): ?array
    {
        return $this->nullableStringEnumArray;
    }

    public function toArray(): array
    {
        $fields                                     = [];
        $fields['mandatoryStringEnumArray']         = array_map(static fn (StringParamOneEnum $item): string => $item->value, $this->mandatoryStringEnumArray);
        $fields['mandatoryNullableStringEnumArray'] = $this->mandatoryNullableStringEnumArray !== null ? array_map(static fn (StringParamOneEnum $item): string => $item->value, $this->mandatoryNullableStringEnumArray) : null;
        if ($this->hasOptionalStringEnumArray()) {
            $fields['optionalStringEnumArray'] = array_map(static fn (StringParamTwoEnum $item): string => $item->value, $this->optionalStringEnumArray);
        }
        $fields['mandatoryIntegerEnumArray'] = array_map(static fn (IntParamEnum $item): int => $item->value, $this->mandatoryIntegerEnumArray);
        if ($this->hasNullableStringEnumArray()) {
            $fields['nullableStringEnumArray'] = $this->nullableStringEnumArray !== null ? array_map(static fn (StringParamTwoEnum $item): string => $item->value, $this->nullableStringEnumArray) : null;
        }

        return $fields;
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }
}
