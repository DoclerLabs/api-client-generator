<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace OpenApi\PetStoreClient;

use OpenApi\PetStoreClient\Request\AddPetRequest;
use OpenApi\PetStoreClient\Request\CreateUserRequest;
use OpenApi\PetStoreClient\Request\CreateUsersWithListInputRequest;
use OpenApi\PetStoreClient\Request\DeleteOrderRequest;
use OpenApi\PetStoreClient\Request\DeletePetRequest;
use OpenApi\PetStoreClient\Request\DeleteUserRequest;
use OpenApi\PetStoreClient\Request\FindPetsByStatusRequest;
use OpenApi\PetStoreClient\Request\FindPetsByTagsRequest;
use OpenApi\PetStoreClient\Request\GetInventoryRequest;
use OpenApi\PetStoreClient\Request\GetOrderByIdRequest;
use OpenApi\PetStoreClient\Request\GetPetByIdRequest;
use OpenApi\PetStoreClient\Request\GetUserByNameRequest;
use OpenApi\PetStoreClient\Request\LoginUserRequest;
use OpenApi\PetStoreClient\Request\LogoutUserRequest;
use OpenApi\PetStoreClient\Request\Mapper\RequestMapperInterface;
use OpenApi\PetStoreClient\Request\PlaceOrderRequest;
use OpenApi\PetStoreClient\Request\RequestInterface;
use OpenApi\PetStoreClient\Request\UpdatePetRequest;
use OpenApi\PetStoreClient\Request\UpdatePetWithFormRequest;
use OpenApi\PetStoreClient\Request\UpdateUserRequest;
use OpenApi\PetStoreClient\Response\ResponseHandler;
use OpenApi\PetStoreClient\Schema\GetInventoryResponseBody;
use OpenApi\PetStoreClient\Schema\Mapper\GetInventoryResponseBodyMapper;
use OpenApi\PetStoreClient\Schema\Mapper\OrderMapper;
use OpenApi\PetStoreClient\Schema\Mapper\PetCollectionMapper;
use OpenApi\PetStoreClient\Schema\Mapper\PetMapper;
use OpenApi\PetStoreClient\Schema\Mapper\UserMapper;
use OpenApi\PetStoreClient\Schema\Order;
use OpenApi\PetStoreClient\Schema\Pet;
use OpenApi\PetStoreClient\Schema\PetCollection;
use OpenApi\PetStoreClient\Schema\User;
use OpenApi\PetStoreClient\Serializer\ContentType\ContentTypeSerializerInterface;
use Psr\Container\ContainerInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\ResponseInterface;

class SwaggerPetstoreOpenAPI3Client
{
    private ClientInterface $client;

    private ContainerInterface $container;

    public function __construct(ClientInterface $client, ContainerInterface $container)
    {
        $this->client    = $client;
        $this->container = $container;
    }

    public function sendRequest(RequestInterface $request): ResponseInterface
    {
        return $this->client->sendRequest($this->container->get(RequestMapperInterface::class)->map($request));
    }

    public function updatePet(UpdatePetRequest $request): Pet
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(PetMapper::class)->toSchema($response);
    }

    public function addPet(AddPetRequest $request): Pet
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(PetMapper::class)->toSchema($response);
    }

    public function findPetsByStatus(FindPetsByStatusRequest $request): PetCollection
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(PetCollectionMapper::class)->toSchema($response);
    }

    public function findPetsByTags(FindPetsByTagsRequest $request): PetCollection
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(PetCollectionMapper::class)->toSchema($response);
    }

    public function getPetById(GetPetByIdRequest $request): Pet
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(PetMapper::class)->toSchema($response);
    }

    public function updatePetWithForm(UpdatePetWithFormRequest $request): void
    {
        $this->handleResponse($this->sendRequest($request));
    }

    public function deletePet(DeletePetRequest $request): void
    {
        $this->handleResponse($this->sendRequest($request));
    }

    public function getInventory(GetInventoryRequest $request): GetInventoryResponseBody
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(GetInventoryResponseBodyMapper::class)->toSchema($response);
    }

    public function placeOrder(PlaceOrderRequest $request): Order
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(OrderMapper::class)->toSchema($response);
    }

    public function getOrderById(GetOrderByIdRequest $request): Order
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(OrderMapper::class)->toSchema($response);
    }

    public function deleteOrder(DeleteOrderRequest $request): void
    {
        $this->handleResponse($this->sendRequest($request));
    }

    public function createUser(CreateUserRequest $request): void
    {
        $this->handleResponse($this->sendRequest($request));
    }

    public function createUsersWithListInput(CreateUsersWithListInputRequest $request): User
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(UserMapper::class)->toSchema($response);
    }

    public function loginUser(LoginUserRequest $request): string
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $response[ContentTypeSerializerInterface::LITERAL_VALUE_KEY];
    }

    public function logoutUser(LogoutUserRequest $request): void
    {
        $this->handleResponse($this->sendRequest($request));
    }

    public function getUserByName(GetUserByNameRequest $request): User
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(UserMapper::class)->toSchema($response);
    }

    public function updateUser(UpdateUserRequest $request): void
    {
        $this->handleResponse($this->sendRequest($request));
    }

    public function deleteUser(DeleteUserRequest $request): void
    {
        $this->handleResponse($this->sendRequest($request));
    }

    protected function handleResponse(ResponseInterface $response)
    {
        return $this->container->get(ResponseHandler::class)->handle($response);
    }
}
