<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace OpenApi\PetStoreClient;

use DoclerLabs\ApiClientException\Factory\ResponseExceptionFactory;
use OpenApi\PetStoreClient\Request\Mapper\GuzzleRequestMapper;
use OpenApi\PetStoreClient\Request\Mapper\RequestMapperInterface;
use OpenApi\PetStoreClient\Response\ResponseHandler;
use OpenApi\PetStoreClient\Schema\Mapper\CategoryMapper;
use OpenApi\PetStoreClient\Schema\Mapper\GetInventoryResponseBodyMapper;
use OpenApi\PetStoreClient\Schema\Mapper\OrderMapper;
use OpenApi\PetStoreClient\Schema\Mapper\PetCollectionMapper;
use OpenApi\PetStoreClient\Schema\Mapper\PetMapper;
use OpenApi\PetStoreClient\Schema\Mapper\TagCollectionMapper;
use OpenApi\PetStoreClient\Schema\Mapper\TagMapper;
use OpenApi\PetStoreClient\Schema\Mapper\UserMapper;
use OpenApi\PetStoreClient\Serializer\BodySerializer;
use OpenApi\PetStoreClient\Serializer\ContentType\FormUrlencodedContentTypeSerializer;
use OpenApi\PetStoreClient\Serializer\ContentType\JsonContentTypeSerializer;
use OpenApi\PetStoreClient\Serializer\ContentType\XmlContentTypeSerializer;
use OpenApi\PetStoreClient\Serializer\QuerySerializer;
use Pimple\Container;

class ServiceProvider
{
    public function register(Container $container): void
    {
        $container[BodySerializer::class] = static function (): BodySerializer {
            return (new BodySerializer())->add(new JsonContentTypeSerializer())->add(new FormUrlencodedContentTypeSerializer())->add(new XmlContentTypeSerializer());
        };
        $container[QuerySerializer::class] = static function (): QuerySerializer {
            return new QuerySerializer();
        };
        $container[ResponseHandler::class] = static function () use ($container): ResponseHandler {
            return new ResponseHandler($container[BodySerializer::class], new ResponseExceptionFactory());
        };
        $container[RequestMapperInterface::class] = static function () use ($container): RequestMapperInterface {
            return new GuzzleRequestMapper($container[BodySerializer::class], $container[QuerySerializer::class]);
        };
        $container[PetMapper::class] = static function () use ($container): PetMapper {
            return new PetMapper($container[CategoryMapper::class], $container[TagCollectionMapper::class]);
        };
        $container[CategoryMapper::class] = static function () use ($container): CategoryMapper {
            return new CategoryMapper();
        };
        $container[TagCollectionMapper::class] = static function () use ($container): TagCollectionMapper {
            return new TagCollectionMapper($container[TagMapper::class]);
        };
        $container[TagMapper::class] = static function () use ($container): TagMapper {
            return new TagMapper();
        };
        $container[PetCollectionMapper::class] = static function () use ($container): PetCollectionMapper {
            return new PetCollectionMapper($container[PetMapper::class]);
        };
        $container[GetInventoryResponseBodyMapper::class] = static function () use ($container): GetInventoryResponseBodyMapper {
            return new GetInventoryResponseBodyMapper();
        };
        $container[OrderMapper::class] = static function () use ($container): OrderMapper {
            return new OrderMapper();
        };
        $container[UserMapper::class] = static function () use ($container): UserMapper {
            return new UserMapper();
        };
    }
}
